generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  number    String    @unique
  password  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  address   Address[]
  booking   Booking[]
  role      ROLE
}

model Address {
  id     Int    @id @default(autoincrement())
  street String
  city   String
  zip    String
  userId Int
  user   User   @relation(fields: [userId], references: [id])
}

model Staff {
  id                Int                 @id @default(autoincrement())
  name              String
  number            String              @unique
  password          String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
  isAdmin           Boolean             @default(false)
  booking           Booking[]
  StaffAvailability StaffAvailability[]
  role              ROLE
}

model StaffAvailability {
  id          Int      @id @default(autoincrement())
  date        DateTime 
  timeGap     Int?
  day         String
  startTime   String
  endTime     String
  isAvailable Boolean  @default(true)
  updatedAt   DateTime @updatedAt
  cratedAt    DateTime @default(now())
  staffId     Int
  staff       Staff    @relation(fields: [staffId], references: [id])
  @@unique([staffId , date])
}

model Booking {
  id            Int             @id @default(autoincrement())
  userId        Int
  user          User            @relation(fields: [userId], references: [id])
  username      String
  staffName     String
  staffId       Int?
  staff         Staff?          @relation(fields: [staffId], references: [id])
  bookingType   String
  price         Int
  address       Json?
  date          DateTime
  starttime     DateTime
  endtime       DateTime
  bookedService BookedService[]
  status        bookingstatus
  orderId       String
  createdAt     DateTime        @default(now())
}

model BookedService {
  id        Int     @id @default(autoincrement())
  bookingId Int
  booking   Booking @relation(fields: [bookingId], references: [id])
  services  Json[]
}

model Services {
  id          Int        @id @default(autoincrement())
  servicename String     @unique
  price       Int
  duration    Int
  type        String
  description String
  img         Json       @default("[]")
  packages    Packages[]
}

model Packages {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  price       Int
  description String
  img         Json       @default("[]")
  services    Services[]
}

enum bookingstatus {
  PENDING
  CONFIRMED
  DONE
  ACCEPTED
  REJECTED
}

enum ROLE {
  USER
  ADMIN
  STAFF
}
